name: Test & Deploy Email Verifier Lambda

on:
    push:
        branches:
            - main
            - dev
    pull_request:
        branches:
            - main 
    
jobs:
    unit-test:
        runs-on: ubuntu-latest
        name: Run unit tests

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip 
            pip install -r requirements.txt 
            pip install pytest pytest-cov
        
        - name: Run unit tests
          run: |
            pytest tests/test_email_verifier.py -v --cov=. --cov-report=term-missing
        
        - name: Check test coverage
          run: |
            pytest tests/test_email_verifier.py --cov=. --cov-fail-under=70
    
    deploy-test:
        needs: unit-test
        runs-on: ubuntu-latest
        name: Deploy to test stage
        if: github.ref == 'refs/heads/dev' || github.event_name == 'pull_request'

        steps:
        - name: Checkout code 
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
        
        - name: Install dependencies
          run: |
            mkdir -p package
            pip install -r requirements.txt -t package/
            cp lambda_function.py package/

        - name: Create deployment package
          run: |
            cd package
            zip -r ../lambda-deployment.zip .
            cd ..
        
        - name: Deploy lambda function
          run: |
            aws lambda update-function-code \
                --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
                --zip-file fileb://lambda-deployment.zip 

        - name: Wait for lambda to update
          run: sleep 20

        - name: Deploy to test stage
          run: |
            aws apigateway create-deployment \
                --rest-api-id ${{ secrets.API_GATEWAY_ID }} \
                --stage-name test \
                --description "Deployed from GitHub Actions - ${{ github.sha }}"
        
        - name: Echo test URL
          run: |
            echo "Deployed to test: ${{ secrets.TEST_API_URL }}"

    integration-tests-test:
        needs: deploy-test
        runs-on: ubuntu-latest
        name: Integration tests (test env.)
        if: github.ref == 'refs/heads/dev' || github.event_name == 'pull_request'

        steps:
        - name: Checkout code 
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'

        - name: Install test dependencies
          run: |
            pip install requests python-dotenv pytest

        - name: Run integration tests
          env:
            PROD_API_URL: ${{ secrets.TEST_API_URL }}
            PROD_API_KEY: ${{ secrets.TEST_API_KEY }}
          run: |
            pytest tests/test_integration.py -v

    deploy-prod:
        needs: unit-test
        runs-on: ubuntu-latest
        name: Deploy to prod stage
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
        
        - name: Install dependencies
          run: |
            mkdir -p package
            pip install -r requirements.txt -t package/
            cp lambda_function.py package/

        - name: Create deployment package
          run: |
            cd package
            zip -r ../lambda-deployment.zip .
            cd ..

        - name: Deploy lambda function
          run: |
            aws lambda update-function-code \
                --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
                --zip-file fileb://lambda-deployment.zip

        - name: Wait for Lambda update
          run: sleep 20

        - name: Deploy to prod. stage
          run: |
            aws apigateway create-deployment \
                --rest-api-id ${{ secrets.API_GATEWAY_ID }} \
                --stage-name prod \
                --description "Deployed from GitHub Actions - ${{ github.sha }}"
            
        - name: Print prod. URL
          run: |
            echo "Deployed to prod. on ${{ secrets.PROD_API_URL }}"

    api-test-prod:
      needs: deploy-prod
      runs-on: ubuntu-latest
      name: API test in after prod. deployment

      steps:
      - name: Test prod. api 
        run: |
          echo "Testing prod. api..."

          response=$(curl -s -X POST \
            "${{ secrets.PROD_API_URL }}" \
            -H "Content-Type: application/json" \
            -H "x-api-key: ${{ secrets.PROD_API_KEY }} \
            -d '{"email": "user@gmail.com"}'
          )

          echo "Response: $response"

          if echo "$response" | grep -q "safe_to_register"; then
            echo "API test passed"
          else
            echo "API test failed"
            exit 1
          fi
    
    metrics-check:
      needs: deploy-prod
      runs-on: ubuntu-latest
      name: Check metrics

      steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Test production API
        run: |
          echo "Testing production API..."
          
          # Test valid email
          response=$(curl -s -X POST \
            "${{ secrets.PROD_API_URL }}" \
            -H "Content-Type: application/json" \
            -H "x-api-key: ${{ secrets.PROD_API_KEY }}" \
            -d '{"email": "user@gmail.com"}')
          
          echo "Response: $response"
          
          # Check if response contains key fields
          if echo "$response" | grep -q "safe_to_register"; then
            echo "API test passed"
          else
            echo "API test failed"
            exit 1
          fi

      - name: Invoke Lambda function
        run: |
          echo "Invoking Lambda function..."
          aws lambda invoke \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --payload '{"email": "test@example.com"}' \
            response.json
          
          if grep -q "safe_to_register" response.json; then
            echo "Function invocation successful"
          else
            echo "Function invocation failed"
            cat response.json
            exit 1
          fi

      - name: Check CloudWatch metrics
        run: |
          echo "Checking CloudWatch metrics..."         
          sleep 30
          
          START_TIME=$(date -u -d '5 minutes ago' '+%Y-%m-%dT%H:%M:%SZ')
          END_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          
          INVOCATIONS=$(aws cloudwatch get-metric-statistics \
            --namespace "AWS/Lambda" \
            --metric-name "Invocations" \
            --dimensions Name=FunctionName,Value=${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --start-time "$START_TIME" \
            --end-time "$END_TIME" \
            --period 300 \
            --statistics Sum \
            --query 'Datapoints[0].Sum' \
            --output text)
          
          ERRORS=$(aws cloudwatch get-metric-statistics \
            --namespace "AWS/Lambda" \
            --metric-name "Errors" \
            --dimensions Name=FunctionName,Value=${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --start-time "$START_TIME" \
            --end-time "$END_TIME" \
            --period 300 \
            --statistics Sum \
            --query 'Datapoints[0].Sum' \
            --output text)
          
          DURATION=$(aws cloudwatch get-metric-statistics \
            --namespace "AWS/Lambda" \
            --metric-name "Duration" \
            --dimensions Name=FunctionName,Value=${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --start-time "$START_TIME" \
            --end-time "$END_TIME" \
            --period 300 \
            --statistics Average \
            --query 'Datapoints[0].Average' \
            --output text)
          
          echo "Metrics Results:"
          echo "- Invocations: ${INVOCATIONS:-0}"
          echo "- Errors: ${ERRORS:-0}"
          echo "- Average Duration: ${DURATION:-N/A} ms"
          
          if [ "$INVOCATIONS" = "None" ] || [ "$INVOCATIONS" = "0" ]; then
            echo "Warning: No invocations recorded in CloudWatch"
          elif [ "$ERRORS" != "None" ] && [ "$ERRORS" != "0" ]; then
            echo "Error: Function had errors"
            exit 1
          else
            echo "Metrics look healthy"
          fi