name: Test & Deploy Email Verifier Lambda

on:
    push:
        branches:
            - main
            - dev
    pull_request:
        branches:
            - main 
    
jobs:
    unit-test:
        runs-on: ubuntu-latest
        name: Run unit tests

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip 
            pip install -r requirements.txt 
            pip install pytest pytest-cov
        
        - name: Run unit tests
          run: |
            pytest tests/test_email_verifier.py -v --cov=. --cov-report=term-missing
        
        - name: Check test coverage
          run: |
            pytest tests/test_email_verifier.py --cov=. --cov-fail-under=70
    
    deploy-test:
        needs: unit-test
        runs-on: ubuntu-latest
        name: Deploy to test stage
        if: github.ref == 'refs/heads/dev' || github.event_name == 'pull_request'

        steps:
        - name: Checkout code 
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
        
        - name: Install dependencies
          run: |
            mkdir -p package
            pip install -r requirements.txt -t package/
            cp lambda_function.py package/

        - name: Create deployment package
          run: |
            cd package
            zip -r ../lambda-deployment.zip .
            cd ..
        
        - name: Deploy lambda function
          run: |
            aws lambda update-function-code \
                --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
                --zip-file fileb://lambda-deployment.zip 

        - name: Wait for lambda to update
          run: sleep 20

        - name: Deploy to test stage
          run: |
            aws apigateway create-deployment \
                --rest-api-id ${{ secrets.API_GATEWAY_ID }} \
                --stage-name test \
                --description "Deployed from GitHub Actions - ${{ github.sha }}"
        
        - name: Echo test URL
          run: |
            echo "Deployed to test: ${{ secrets.TEST_API_URL }}"

    integration-tests-test:
        needs: deploy-test
        runs-on: ubuntu-latest
        name: Integration tests (test env.)
        if: github.ref == 'refs/heads/dev' || github.event_name == 'pull_request'

        steps:
        - name: Checkout code 
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'

        - name: Install test dependencies
          run: |
            pip install requests python-dotenv pytest

        - name: Run integration tests
          env:
            PROD_API_URL: ${{ secrets.TEST_API_URL }}
            PROD_API_KEY: ${{ secrets.TEST_API_KEY }}
          run: |
            pytest tests/test_integration.py -v

    deploy-prod:
        needs: unit-test
        runs-on: ubuntu-latest
        name: Deploy to prod stage
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
        
        - name: Install dependencies
          run: |
            mkdir -p package
            pip install -r requirements.txt -t package/
            cp lambda_function.py package/

        - name: Create deployment package
          run: |
            cd package
            zip -r ../lambda-deployment.zip .
            cd ..

        - name: Deploy lambda function
          run: |
            aws lambda update-function-code \
                --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
                --zip-file fileb://lambda-deployment.zip

        - name: Wait for Lambda update
          run: sleep 20

        - name: Deploy to prod. stage
          run: |
            aws apigateway create-deployment \
                --rest-api-id ${{ secrets.API_GATEWAY_ID }} \
                --stage-name prod \
                --description "Deployed from GitHub Actions - ${{ github.sha }}"
            
        - name: Print prod. URL
          run: |
            echo "Deployed to prod. on ${{ secrets.PROD_API_URL }}"
    
    after-deployment-test:
      needs: deploy-prod
      runs-on: ubuntu-latest
      name: Testing API after prod

      steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install requests
        run: pip install requests
      
      - name: Wait for API GW to propagate
        run: sleep 60

      - name: Test prod. API 
        env:
          PROD_API_KEY: ${{ secrets.PROD_API_KEY }}
          PROD_API_URL: ${{ secrets.PROD_API_URL }}
        run: |
          python3 << 'EOF'
          import requests
          import json
          import os

          api_key = os.getenv('PROD_API_KEY')
          url = os.getenv('PROD_API_URL')

          print(f"Testing API")
          print(f"API Key: {1 if api_key else 0}")

          payload = {"email": "user@gmail.com"}
          headers = {
            "Content-Type": "application/json",
            "x-api-key": api_key.strip() 
          }

          try:
            response = requests.post(url, headers=headers, json=payload)
            print(f"Status code: {response.status_code}")

            if response.status_code == 200:
              data = response.json()
              body_str = data["body"]
              body_dict = json.loads(body_str)
              print(f"Safe to register: {body_dict['safe_to_register']}")
              print("API test passed")
            else:
              print(f"API test FAILED - HTTP {response.status_code}")
              print(f"Response: {response.text}")
              exit(1)
          except Exception as e:
            print(f"API test FAILED - Error: {e}")
            exit(1)
          EOF

        